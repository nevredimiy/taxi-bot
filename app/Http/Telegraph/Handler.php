<?php

namespace App\Http\Telegraph;

use App\Models\Driver;
use App\Models\Client;
use DefStudio\Telegraph\Facades\Telegraph;
use DefStudio\Telegraph\Handlers\WebhookHandler;
use DefStudio\Telegraph\Keyboard\Button;
use DefStudio\Telegraph\Keyboard\Keyboard;
use Illuminate\Support\Stringable;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;

class Handler extends WebhookHandler
{
    public function start(): void
    {
        $this->chat->message('Welcome!')
            ->keyboard(Keyboard::make()->buttons([
                Button::make('üöó Driver registration')->action('register_driver'),
                Button::make('Client registration')->action('register_client'),
            ]))->send();
    }

    public function register_driver(): void
    {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        $this->chat->storage()->set('registration_step', 'first_name');
        $this->chat->message('Please enter your first name:')->send();
    }

    public function register_client(): void
    {
        $this->chat->storage()->set('registration_step', 'client_first_name');
        $this->chat->message('Please enter your first name:')->send();
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * @param Stringable $text
     */
    protected function handleChatMessage(Stringable $text): void
    {

        Log::info(json_encode($this->message->toArray(), JSON_UNESCAPED_UNICODE));
        
        $step = $this->chat->storage()->get('registration_step');

        switch ($step) {
            case 'client_first_name':
                $this->chat->storage()->set('client_first_name', $text);
                $this->chat->storage()->set('registration_step', 'client_last_name');
                $this->chat->message('Enter your last name:')->send();
                break;

            case 'client_last_name':
                $this->chat->storage()->set('client_last_name', $text);
                $this->chat->storage()->set('registration_step', 'client_phone');
                $this->chat->message('Enter your phone number:')->send();
                break;

            case 'client_phone':
                $this->chat->storage()->set('client_phone', $text);
                $this->chat->storage()->set('registration_step', 'client_country');
                $this->chat->message('Enter your country:')->send();
                break;

            case 'client_country':
                $this->chat->storage()->set('client_country', $text);
                $this->chat->storage()->set('registration_step', 'client_city');
                $this->chat->message('Enter your city:')->send();
                break;

            case 'client_city':
                $this->chat->storage()->set('client_city', $text);
                $this->saveClient();
                break;

            default:
                $this->chat->message('Use /start to begin.')->send();
        }
        

        // –ï—Å–ª–∏ –º—ã –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ, –∞ –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç, –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.
        if (in_array($step, ['license_photo', 'car_photo'])) {
            $this->chat->message('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∞ –Ω–µ —Ç–µ–∫—Å—Ç.')->send();
            return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º match –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ —à–∞–≥–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞—é—Ç —Ç–µ–∫—Å—Ç.
        match ($step) {
            'first_name' => $this->handleFirstName($text->toString()),
            'last_name' => $this->handleLastName($text->toString()),
            'license_number' => $this->handleLicenseNumber($text->toString()),
            'car_model' => $this->handleCarModel($text->toString()),
            'country' => $this->handleCountry($text->toString()),
            'city' => $this->handleCity($text->toString()),
            default => $this->chat->message('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è".')
                ->keyboard(Keyboard::make()->buttons([
                    Button::make('üöó Driver registration')->action('register_driver'),
                ]))
                ->send(),
        };
    }

    protected function saveClient(): void
    {
        $client = new Client();
        $client->first_name = $this->chat->storage()->get('client_first_name');
        $client->last_name = $this->chat->storage()->get('client_last_name');
        $client->phone = $this->chat->storage()->get('client_phone');
        $client->country = $this->chat->storage()->get('client_country');
        $client->city = $this->chat->storage()->get('client_city');
        $client->telegram_id = $this->message->from()->id();

        $client->save();

        $this->chat->message('‚úÖ You have been successfully registered as a client!')->send();

        // Clear storage
        $this->chat->storage()->forget;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    public function handlePhoto(): void
    {
        $step = $this->chat->storage()->get('registration_step');
        // –ü–æ–ª—É—á–∞–µ–º file_id –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        $fileId = $this->message->photos()->last()->id();

        if ($step === 'license_photo') {
            $this->chat->storage()->set('license_photo_file_id', $fileId);
            $this->chat->storage()->set('registration_step', 'car_photo');
            $this->chat->message('Thank you. Now send a photo of the car.')->send();
        } elseif ($step === 'car_photo') {
            $this->chat->storage()->set('car_photo_file_id', $fileId);
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è
            $this->saveDriver();
        } else {
            // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ –Ω–∞ —Ç–æ–º —à–∞–≥–µ
            $this->chat->message('–Ø –Ω–µ –æ–∂–∏–¥–∞–ª –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ.')->send();
        }
    }

    protected function handleFirstName(string $text): void
    {
        $this->chat->storage()->set('first_name', $text);
        $this->chat->storage()->set('registration_step', 'license_number');
        $this->chat->message('Enter your last name:')->send();
    }

    protected function handleLastName(string $text): void
    {
        $this->chat->storage()->set('last_name', $text);
        $this->chat->storage()->set('registration_step', 'license_number');
        $this->chat->message('Enter the license number or state registration number of the car:')->send();
    }

    protected function handleLicenseNumber(string $text): void
    {
        $this->chat->storage()->set('license_number', $text);
        $this->chat->storage()->set('registration_step', 'car_model');
        $this->chat->message('Enter the make and model of your vehicle (e.g. Toyota Camry):')->send();
    }

    protected function handleCarModel(string $text): void
    {
        $this->chat->storage()->set('car_model', $text);
        $this->chat->storage()->set('registration_step', 'country');
        $this->chat->message('Enter country:')->send();
    }

    protected function handleCountry(string $text): void
    {
        $this->chat->storage()->set('country', $text);
        $this->chat->storage()->set('registration_step', 'city');
        $this->chat->message('Enter city:')->send();
    }

    protected function handleCity(string $text): void
    {
        $this->chat->storage()->set('city', $text);
        $this->chat->storage()->set('registration_step', 'license_photo');
        $this->chat->message('Great! Now send a photo of your driver\'s license:')->send();
    }

    protected function saveDriver(): void
    {
        $data = $this->chat->storage()->get;
        $chatId = $this->chat->chat_id; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —á–∞—Ç–∞ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏

        try {
            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            $licenseFileId = $data['license_photo_file_id'];
            $carFileId = $data['car_photo_file_id'];
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            $licenseRelativePath = "img/license_photo/{$chatId}_license.jpg";
            $carRelativePath = "img/car_photo/{$chatId}_car.jpg";

            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é –≤ public storage
            Telegraph::download($licenseFileId, Storage::path("public/{$licenseRelativePath}"));
            Telegraph::download($carFileId, Storage::path("public/{$carRelativePath}"));

            Driver::create([
                'user_id' => null, // –∏–ª–∏ –ø–æ –ª–æ–≥–∏–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                'telegram_id' => $chatId, // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è —Å–≤—è–∑–∏
                'first_name' => $data['first_name'],
                'last_name' => $data['last_name'],
                'license_number' => $data['license_number'],
                'car_model' => $data['car_model'],
                'country' => $data['country'],
                'city' => $data['city'],
                'license_photo' => $licenseRelativePath, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                'car_photo' => $carRelativePath, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                'status' => 'pending',
            ]);

            // –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            // $this->chat->storage()->clear();
            $this->chat->message('Registration completed successfully! Wait for confirmation. üöó')->send();

        } catch (\Throwable $e) {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ª–æ–≥–∏—Ä—É–µ–º
            report($e); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è Laravel
            $this->chat->message('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')->send();
        }
    }
}
